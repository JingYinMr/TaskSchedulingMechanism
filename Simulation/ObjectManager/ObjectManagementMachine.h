#pragma once
#include<iostream>
#include<vector>
#include<list>

#include"EntityBase.h"
#include "ComponentBase.h"
#include "ComponentFactory.h"
#include "EntityFactory.h"
#include "EventHandBase.h"

#include <mutex>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	对象管理器（全局唯一）.	</summary>
///
/// <remarks>	朱连超, 2024/05/03.	</remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class ObjectManagementMachine
{
private:
	ObjectManagementMachine()
		:IsMissionComponent(false)
		, EntityHandle(0)
	{}

public:
	virtual ~ObjectManagementMachine();
	static ObjectManagementMachine *Instance();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取对象管理器.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/03.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<std::shared_ptr<EntityBase>> GetObjectManger();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取对象模板.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/03.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<std::shared_ptr<EntityBase>> GetEntityModelVec();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取组件模板.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/03.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<std::shared_ptr<ComponentBase>> GetComponentModelVec();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取战场空间管理器.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/03.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	vector<std::shared_ptr<EntityBase>> GetBattleSpaceVec();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	创建实体模板对象.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/05.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CreateObject(std::shared_ptr<EntityFactoryBase> EntityFactory);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	创建组件模板对象.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/05.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void CreateObject(std::shared_ptr<ComponentFactoryBase> ComponentFactory);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	用于实现对象的深拷贝.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/07.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::shared_ptr<EntityBase> cloneEntity(const std::shared_ptr<EntityBase>& EntityBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	用于实现组件的深拷贝.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/07.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::shared_ptr<ComponentBase> cloneComponent(const std::shared_ptr<ComponentBase>& ComponentBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	用于实现实体与组件的结合.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/07.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void EntityCombineComponent(std::shared_ptr<EntityBase>& EntityBasePtr, const std::shared_ptr<ComponentBase>& ComponentBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	将实体用于战场空间.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/13.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	std::shared_ptr<EntityBase> BattleSpaceCreateEntity(const std::shared_ptr<EntityBase>& EntityBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	添加观察者（处理实体）.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/13.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void AddObserversHandlEntity(std::shared_ptr<EventHandBase> EventHandBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	移除观察者（处理实体）.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/13.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void RemoveObserversHandlEntity(std::shared_ptr<EventHandBase> EventHandBasePtr);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	通知观察者（处理实体）.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/13.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void NotifyObserversHandlEntity(const std::shared_ptr<EntityBase> EntityBasePtr);

private:
	/// <summary>	战场空间管理器（实体）.	</summary>
	vector<std::shared_ptr<EntityBase>> BattleSpaceVec;

	/// <summary>	组合对象管理器（单个实体与组件结合）.	</summary>
	vector<std::shared_ptr<EntityBase>> EntityVec;

	/// <summary>	对象模板管理器.	</summary>
	vector<std::shared_ptr<EntityBase>> EntityModelVec;

	/// <summary>	组件模板管理器.	</summary>
	vector<std::shared_ptr<ComponentBase>> ComponentModelVec;

	/// <summary>	是否已经管理任务组件.	</summary>
	bool IsMissionComponent;

	/// <summary>	实体句柄.	</summary>
	size_t EntityHandle;

	/// <summary>	线程互斥量.	</summary>
	std::mutex _mutex;

	/// <summary> 事件处理容器 </summary>
	std::list<std::shared_ptr<EventHandBase>> ObserversList;
};

