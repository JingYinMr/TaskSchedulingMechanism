#pragma once
#include<iostream>
#include "EntityBase.h"

#include<list>
#include<string>

#include "ComponentBase.h"

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	实体模型，继承抽象实体，所有具体实体继承该类.	</summary>
///
/// <remarks>	朱连超, 2024/05/01.	</remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class EntityModel :
	public EntityBase
{
public:
	EntityModel();
	virtual ~EntityModel();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	添加叶子结点.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/29.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void AddNode(std::shared_ptr<ComponentBase> elements);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	删除叶子结点.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/29.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void RemoveNode(std::shared_ptr<ComponentBase> elements);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	核心接口.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/29.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Process();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	子类拷贝对象.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/07.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual std::shared_ptr<EntityBase> clone() const override;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	获取组件信息.	</summary>
	///
	/// <remarks>	朱连超, 2024/05/08.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	list<std::shared_ptr<ComponentBase>> GetelementsList();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	write or read EntityName.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/30.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetEntityName(std::string entityname);
	std::string GetEntityName();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	write or read EntityType.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/30.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetEntityType(size_t entitytype);
	size_t GetEntityType();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	write or read EntityHandle.	</summary>
	///
	/// <remarks>	朱连超, 2024/04/30.	</remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void SetEntityHandle(size_t entityhandle);
	size_t GetEntityHandle();

private:

	/// <summary>	管理组件树型结构.	</summary>
	list<std::shared_ptr<ComponentBase>> elementsList;

	/// <summary> 实体名称  </summary>
	std::string EntityName;

	/// <summary> 实体类型  </summary>
	size_t EntityType;

	/// <summary> 实体句柄，全局唯一  </summary>
	size_t EntityHandle;
};

